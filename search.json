[{"title":"C++","url":"/2023/02/22/C/","content":"\n关于C++传引用和传参数的理解\n代码\n\n\n\n关于C++传引用和传参数的理解代码#include &lt;iostream&gt;using namespace std; void test(int &amp;a)&#123;    a = 3;    cout &lt;&lt; &amp;a &lt;&lt; &quot; &quot; &lt;&lt; a &lt;&lt; endl;&#125; int main(void)&#123;    int a = 1;    cout &lt;&lt; &amp;a &lt;&lt; &quot; &quot; &lt;&lt; a &lt;&lt; endl;    test(a);    cout &lt;&lt; &amp;a &lt;&lt; &quot; &quot; &lt;&lt; a &lt;&lt; endl;    return 0;&#125;","categories":["study"],"tags":["code"]},{"title":"VPN推荐","url":"/2023/02/25/VPN/","content":"\n使用过速度最快最稳定的VPN\n\n使用过速度最快最稳定的VPNhttps://www.feixunz.shop/auth/register?code=G7Ho\n","categories":["软件推荐"],"tags":["实用软件"]},{"title":"less_is_more","url":"/2023/02/23/less-is-more/","content":"学习了一些基础算法\n首先是前缀和的算法#include &lt;iostream&gt;using namespace std;const int N = 1e6 + 10;int a[N],S[N];int n,m,l,r;int main()&#123;    cin &gt;&gt; n&gt;&gt; m;    for(int i=1;i&lt;=n;i++)    &#123;cin &gt;&gt; a[i];&#125;    S[0] = 0;    for(int i=1;i&lt;=n;i++)    &#123;S[i]=S[i-1]+a[i];&#125;    while(m--)    &#123;        cin &gt;&gt; l &gt;&gt;r;        cout &lt;&lt; (S[r]-S[l-1]) &lt;&lt;endl;    &#125;    return 0;&#125;\n接下来是差分算法，实际上是对于前缀和的逆运算#include &lt;iostream&gt;using namespace std;const int N = 1e6 + 10;int a[N],b[N];int n,m,l,r,c;void insert(int l,int r,int c)&#123;    b[l] +=c;    b[r+1] -= c;&#125;int main()&#123;    cin &gt;&gt; n &gt;&gt;m;    for(int i=1;i&lt;=n;i++) cin &gt;&gt; a[i];    for(int i=1;i&lt;=n;i++) insert(i,i,a[i]);    while(m--)    &#123;        cin &gt;&gt; l&gt;&gt;r&gt;&gt;c;        insert(l,r,c);    &#125;    for(int i=1;i&lt;=n;i++) b[i]+=b[i-1];    for(int i=1;i&lt;=n;i++) cout &lt;&lt;b[i]&lt;&lt;&quot; &quot;;    return 0;&#125;\n实际上他们也都有各自的二维算法这是前缀和#include &lt;iostream&gt;using namespace std;const int N = 1010;int a[N][N],s[N][N];int main()&#123;    int n,m,q;    cin &gt;&gt; n&gt;&gt; m &gt;&gt;q;    for(int i=1;i&lt;=n;i++)        for(int j =1;j&lt;=m;j++)        &#123;  cin &gt;&gt; a[i][j];            s[i][j] = s[i][j-1] + s[i-1][j] -s[i-1][j-1] +a[i][j];        &#125;    while(q--)    &#123;        int x1,y1,x2,y2;        cin &gt;&gt; x1 &gt;&gt; y1&gt;&gt; x2 &gt;&gt; y2;        cout &lt;&lt; (s[x2][y2]-s[x2][y1-1]-s[x1-1][y2]+s[x1-1][y1-1]) &lt;&lt;endl;    &#125;    return 0;&#125;\n这是差分矩阵#include &lt;iostream&gt;using namespace std;const int N = 1010;int a[N][N],b[N][N];int n,m,q,x1,y1,x2,y2,c;void insert(int x1,int y1,int x2,int y2,int c)&#123;    b[x1][y1] +=c;    b[x2+1][y1] -= c;    b[x1][y2+1] -= c;    b[x2+1][y2+1] += c;&#125;int main()&#123;    cin &gt;&gt; n &gt;&gt;m &gt;&gt;q;    for(int i=1;i&lt;=n;i++)         for(int j=1;j&lt;=m;j++)            cin &gt;&gt; a[i][j];    for(int i=1;i&lt;=n;i++)         for(int j=1;j&lt;=m;j++)            insert(i,j,i,j,a[i][j]);    while(q--)    &#123;        cin &gt;&gt; x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2&gt;&gt;c;        insert(x1,y1,x2,y2,c);    &#125;    for(int i=1;i&lt;=n;i++)        for(int j=1;j&lt;=m;j++)            b[i][j] += b[i-1][j] + b[i][j-1] -b[i-1][j-1];        for(int i=1;i&lt;=n;i++)        &#123;            for(int j=1;j&lt;=m;j++)            &#123;                cout &lt;&lt; b[i][j] &lt;&lt;&quot; &quot;;            &#125;            cout &lt;&lt;endl;        &#125;    return 0;&#125;\n\n","categories":["study"],"tags":["code"]},{"title":"kaggle","url":"/2023/03/14/kaggle/","content":"\nKaggle study note\n缺失数据处理\n\n\n\nKaggle study note缺失数据处理#missing datatotal = df_train.isnull().sum().sort_values(ascending=False)percent = (df_train.isnull().sum()/df_train.isnull().count()).sort_values(ascending=False)#这里sum是把值加起来，count是数了一遍，有多少个值missing_data = pd.concat([total, percent], axis=1, keys=[&#x27;Total&#x27;, &#x27;Percent&#x27;])missing_data.head(20)\nmissing_data构建：\nmissing_data = pd.concat([total, percent], axis=1, keys=[&#x27;Total&#x27;, &#x27;Percent&#x27;])","tags":["ML"]},{"title":"var","url":"/2023/04/16/var/","content":"值传递 引用传递 指针传递#include&lt;iostream&gt;using namespace std;//值传递 void change1(int n) &#123;      cout&lt;&lt;&quot;值传递--函数操作地址 &quot;&lt;&lt;&amp;n&lt;&lt;endl;         //显示的是拷贝的地址而不是源地址       n++; &#125;//引用传递 void change2(int &amp;n) &#123;    cout &lt;&lt;&quot;引用传递--函数操作地址 &quot; &lt;&lt; &amp;n&lt;&lt;endl;    n++; &#125; void change3(int *n) &#123;    cout &lt;&lt;&quot;指针传递--函数操作地址 &quot; &lt;&lt; n&lt;&lt;endl;    (*n)++; &#125; int main() &#123;    int n = 0;    change2(n);    cout &lt;&lt; n; &#125;"},{"title":"第一篇离线笔记","url":"/2023/03/14/5.5/","content":"记录一下美好生活","tags":["ML"]}]