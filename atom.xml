<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>welcome home</title>
  
  <subtitle>guagua</subtitle>
  <link href="http://smile.github.io/atom.xml" rel="self"/>
  
  <link href="http://smile.github.io/"/>
  <updated>2023-03-14T03:21:01.266Z</updated>
  <id>http://smile.github.io/</id>
  
  <author>
    <name>guagua</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kaggle</title>
    <link href="http://smile.github.io/2023/03/14/kaggle/"/>
    <id>http://smile.github.io/2023/03/14/kaggle/</id>
    <published>2023-03-14T03:13:34.000Z</published>
    <updated>2023-03-14T03:21:01.266Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#kaggle-study-note">Kaggle study note</a><ul><li><a href="#missding-data">missding data</a></li></ul></li></ul><h1 id="Kaggle-study-note"><a href="#Kaggle-study-note" class="headerlink" title="Kaggle study note"></a>Kaggle study note</h1><h2 id="missding-data"><a href="#missding-data" class="headerlink" title="missding data"></a>missding data</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#missing data</span><br>total = df_train.isnull().<span class="hljs-built_in">sum</span>().sort_values(ascending=<span class="hljs-literal">False</span>)<br>percent = (df_train.isnull().<span class="hljs-built_in">sum</span>()/df_train.isnull().count()).sort_values(ascending=<span class="hljs-literal">False</span>)<br><span class="hljs-comment">#这里sum是把值加起来，count是数了一遍，有多少个值</span><br>missing_data = pd.concat([total, percent], axis=<span class="hljs-number">1</span>, keys=[<span class="hljs-string">&#x27;Total&#x27;</span>, <span class="hljs-string">&#x27;Percent&#x27;</span>])<br>missing_data.head(<span class="hljs-number">20</span>)<br></code></pre></td></tr></table></figure><p>missing_data构建</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#kaggle-study-note&quot;&gt;Kaggle study note&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#missding-data&quot;&gt;missding data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id</summary>
      
    
    
    
    
    <category term="ML" scheme="http://smile.github.io/tags/ML/"/>
    
  </entry>
  
  <entry>
    <title>struct</title>
    <link href="http://smile.github.io/2023/03/03/struct/"/>
    <id>http://smile.github.io/2023/03/03/struct/</id>
    <published>2023-03-03T15:16:31.000Z</published>
    <updated>2023-03-03T15:19:47.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="今天学了一些关于数据结构的知识"><a href="#今天学了一些关于数据结构的知识" class="headerlink" title="今天学了一些关于数据结构的知识"></a>今天学了一些关于数据结构的知识</h1><ul><li><a href="#%E4%BB%8A%E5%A4%A9%E5%AD%A6%E4%BA%86%E4%B8%80%E4%BA%9B%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E7%9F%A5%E8%AF%86">今天学了一些关于数据结构的知识</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//羽毛球筒栈</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> stk[N],tt;<br><br>stk[++t]  =x ; <br>tt--;<br><br><span class="hljs-keyword">if</span>(tt &gt;<span class="hljs-number">0</span>) <span class="hljs-keyword">not</span> empty <br><span class="hljs-keyword">else</span>  empty<br><br><span class="hljs-type">int</span> q[N],hh,tt = <span class="hljs-number">-1</span>;<br><span class="hljs-comment">//插入 </span><br>q[++tt]  = x;<br><span class="hljs-comment">//弹出</span><br>h++ ;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;今天学了一些关于数据结构的知识&quot;&gt;&lt;a href=&quot;#今天学了一些关于数据结构的知识&quot; class=&quot;headerlink&quot; title=&quot;今天学了一些关于数据结构的知识&quot;&gt;&lt;/a&gt;今天学了一些关于数据结构的知识&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E</summary>
      
    
    
    
    <category term="study" scheme="http://smile.github.io/categories/study/"/>
    
    
    <category term="Acwing" scheme="http://smile.github.io/tags/Acwing/"/>
    
  </entry>
  
  <entry>
    <title>VPN推荐</title>
    <link href="http://smile.github.io/2023/02/25/VPN/"/>
    <id>http://smile.github.io/2023/02/25/VPN/</id>
    <published>2023-02-24T16:33:29.000Z</published>
    <updated>2023-02-24T16:35:57.663Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E4%BD%BF%E7%94%A8%E8%BF%87%E9%80%9F%E5%BA%A6%E6%9C%80%E5%BF%AB%E6%9C%80%E7%A8%B3%E5%AE%9A%E7%9A%84vpn">使用过速度最快最稳定的VPN</a></li></ul><h1 id="使用过速度最快最稳定的VPN"><a href="#使用过速度最快最稳定的VPN" class="headerlink" title="使用过速度最快最稳定的VPN"></a>使用过速度最快最稳定的VPN</h1><p><a href="https://www.feixunz.shop/auth/register?code=G7Ho">https://www.feixunz.shop/auth/register?code=G7Ho</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%BD%BF%E7%94%A8%E8%BF%87%E9%80%9F%E5%BA%A6%E6%9C%80%E5%BF%AB%E6%9C%80%E7%A8%B3%E5%AE%9A%E7%9A%84vpn&quot;&gt;使用过速度最快最稳定的VPN&lt;/a</summary>
      
    
    
    
    <category term="软件推荐" scheme="http://smile.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    
    
    <category term="实用软件" scheme="http://smile.github.io/tags/%E5%AE%9E%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>less_is_more</title>
    <link href="http://smile.github.io/2023/02/23/less-is-more/"/>
    <id>http://smile.github.io/2023/02/23/less-is-more/</id>
    <published>2023-02-22T16:23:58.000Z</published>
    <updated>2023-02-24T05:48:15.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习了一些基础算法"><a href="#学习了一些基础算法" class="headerlink" title="学习了一些基础算法"></a>学习了一些基础算法</h1><ul><li>首先是前缀和的算法<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N],S[N];<br><span class="hljs-type">int</span> n,m,l,r;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>    cin &gt;&gt; n&gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)    &#123;cin &gt;&gt; a[i];&#125;<br>    S[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)    &#123;S[i]=S[i<span class="hljs-number">-1</span>]+a[i];&#125;<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        cin &gt;&gt; l &gt;&gt;r;<br>        cout &lt;&lt; (S[r]-S[l<span class="hljs-number">-1</span>]) &lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>接下来是差分算法，实际上是对于前缀和的逆运算<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N],b[N];<br><span class="hljs-type">int</span> n,m,l,r,c;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    b[l] +=c;<br>    b[r+<span class="hljs-number">1</span>] -= c;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>    cin &gt;&gt; n &gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) cin &gt;&gt; a[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">insert</span>(i,i,a[i]);<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        cin &gt;&gt; l&gt;&gt;r&gt;&gt;c;<br>        <span class="hljs-built_in">insert</span>(l,r,c);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) b[i]+=b[i<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) cout &lt;&lt;b[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>实际上他们也都有各自的二维算法<br>这是前缀和<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> a[N][N],s[N][N];<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m,q;<br>    cin &gt;&gt; n&gt;&gt; m &gt;&gt;q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j =<span class="hljs-number">1</span>;j&lt;=m;j++)<br>        &#123;  cin &gt;&gt; a[i][j];<br>            s[i][j] = s[i][j<span class="hljs-number">-1</span>] + s[i<span class="hljs-number">-1</span>][j] -s[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>] +a[i][j];<br>        &#125;<br><br>    <span class="hljs-keyword">while</span>(q--)<br>    &#123;<br>        <span class="hljs-type">int</span> x1,y1,x2,y2;<br>        cin &gt;&gt; x1 &gt;&gt; y1&gt;&gt; x2 &gt;&gt; y2;<br>        cout &lt;&lt; (s[x2][y2]-s[x2][y1<span class="hljs-number">-1</span>]-s[x1<span class="hljs-number">-1</span>][y2]+s[x1<span class="hljs-number">-1</span>][y1<span class="hljs-number">-1</span>]) &lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>这是差分矩阵<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> a[N][N],b[N][N];<br><span class="hljs-type">int</span> n,m,q,x1,y1,x2,y2,c;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x1,<span class="hljs-type">int</span> y1,<span class="hljs-type">int</span> x2,<span class="hljs-type">int</span> y2,<span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    b[x1][y1] +=c;<br>    b[x2+<span class="hljs-number">1</span>][y1] -= c;<br>    b[x1][y2+<span class="hljs-number">1</span>] -= c;<br>    b[x2+<span class="hljs-number">1</span>][y2+<span class="hljs-number">1</span>] += c;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt;m &gt;&gt;q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>            cin &gt;&gt; a[i][j];<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>            <span class="hljs-built_in">insert</span>(i,j,i,j,a[i][j]);<br><br>    <span class="hljs-keyword">while</span>(q--)<br>    &#123;<br>        cin &gt;&gt; x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2&gt;&gt;c;<br>        <span class="hljs-built_in">insert</span>(x1,y1,x2,y2,c);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>            b[i][j] += b[i<span class="hljs-number">-1</span>][j] + b[i][j<span class="hljs-number">-1</span>] -b[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>];<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>            &#123;<br>                cout &lt;&lt; b[i][j] &lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>            &#125;<br>            cout &lt;&lt;endl;<br>        &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习了一些基础算法&quot;&gt;&lt;a href=&quot;#学习了一些基础算法&quot; class=&quot;headerlink&quot; title=&quot;学习了一些基础算法&quot;&gt;&lt;/a&gt;学习了一些基础算法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;首先是前缀和的算法&lt;figure class=&quot;highlight cp</summary>
      
    
    
    
    <category term="study" scheme="http://smile.github.io/categories/study/"/>
    
    
    <category term="code" scheme="http://smile.github.io/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>C++</title>
    <link href="http://smile.github.io/2023/02/22/C/"/>
    <id>http://smile.github.io/2023/02/22/C/</id>
    <published>2023-02-22T10:32:16.000Z</published>
    <updated>2023-02-24T05:47:50.040Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E5%85%B3%E4%BA%8Ec%E4%BC%A0%E5%BC%95%E7%94%A8%E5%92%8C%E4%BC%A0%E5%8F%82%E6%95%B0%E7%9A%84%E7%90%86%E8%A7%A3">关于C++传引用和传参数的理解</a><ul><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li></ul><h1 id="关于C-传引用和传参数的理解"><a href="#关于C-传引用和传参数的理解" class="headerlink" title="关于C++传引用和传参数的理解"></a>关于C++传引用和传参数的理解</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Csharp"><span class="hljs-meta">#include &lt;iostream&gt;</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-title">std</span>;<br> <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> &amp;a</span>)</span>&#123;<br>    a = <span class="hljs-number">3</span>;<br>    cout &lt;&lt; &amp;a &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-keyword">void</span></span>)</span>&#123;<br>    <span class="hljs-built_in">int</span> a = <span class="hljs-number">1</span>;<br>    cout &lt;&lt; &amp;a &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>    test(a);<br>    cout &lt;&lt; &amp;a &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%85%B3%E4%BA%8Ec%E4%BC%A0%E5%BC%95%E7%94%A8%E5%92%8C%E4%BC%A0%E5%8F%82%E6%95%B0%E7%9A%84%E7%90%86%E8%A7%A3&quot;&gt;关于C++传引用和传</summary>
      
    
    
    
    <category term="study" scheme="http://smile.github.io/categories/study/"/>
    
    
    <category term="code" scheme="http://smile.github.io/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://smile.github.io/2023/02/22/hello-world/"/>
    <id>http://smile.github.io/2023/02/22/hello-world/</id>
    <published>2023-02-22T10:32:16.000Z</published>
    <updated>2023-02-24T05:48:17.303Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="study" scheme="http://smile.github.io/categories/study/"/>
    
    
    <category term="code" scheme="http://smile.github.io/tags/code/"/>
    
  </entry>
  
</feed>
