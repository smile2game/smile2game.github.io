<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome home</title>
  
  <subtitle>guagua</subtitle>
  <link href="http://smile.github.io/atom.xml" rel="self"/>
  
  <link href="http://smile.github.io/"/>
  <updated>2023-04-16T08:24:36.055Z</updated>
  <id>http://smile.github.io/</id>
  
  <author>
    <name>guagua</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>var</title>
    <link href="http://smile.github.io/2023/04/16/var/"/>
    <id>http://smile.github.io/2023/04/16/var/</id>
    <published>2023-04-16T08:05:58.000Z</published>
    <updated>2023-04-16T08:24:36.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="值传递-引用传递-指针传递"><a href="#值传递-引用传递-指针传递" class="headerlink" title="值传递 引用传递 指针传递"></a>值传递 引用传递 指针传递</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//值传递</span></span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">change1</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">      cout&lt;&lt;<span class="string">&quot;值传递--函数操作地址 &quot;</span>&lt;&lt;&amp;n&lt;&lt;endl;         <span class="comment">//显示的是拷贝的地址而不是源地址 </span></span><br><span class="line">      n++;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//引用传递</span></span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">change2</span><span class="params">(<span class="type">int</span> &amp;n)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;引用传递--函数操作地址 &quot;</span> &lt;&lt; &amp;n&lt;&lt;endl;</span><br><span class="line">    n++;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">change3</span><span class="params">(<span class="type">int</span> *n)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;指针传递--函数操作地址 &quot;</span> &lt;&lt; n&lt;&lt;endl;</span><br><span class="line">    (*n)++;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">change2</span>(n);</span><br><span class="line">    cout &lt;&lt; n;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;值传递-引用传递-指针传递&quot;&gt;&lt;a href=&quot;#值传递-引用传递-指针传递&quot; class=&quot;headerlink&quot; title=&quot;值传递 引用传递 指针传递&quot;&gt;&lt;/a&gt;值传递 引用传递 指针传递&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第一篇离线笔记</title>
    <link href="http://smile.github.io/2023/03/14/5.5/"/>
    <id>http://smile.github.io/2023/03/14/5.5/</id>
    <published>2023-03-14T03:13:34.000Z</published>
    <updated>2023-05-05T13:56:55.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录一下美好生活"><a href="#记录一下美好生活" class="headerlink" title="记录一下美好生活"></a>记录一下美好生活</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;nice life&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;记录一下美好生活&quot;&gt;&lt;a href=&quot;#记录一下美好生活&quot; class=&quot;headerlink&quot; title=&quot;记录一下美好生活&quot;&gt;&lt;/a&gt;记录一下美好生活&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c</summary>
      
    
    
    
    
    <category term="ML" scheme="http://smile.github.io/tags/ML/"/>
    
  </entry>
  
  <entry>
    <title>kaggle</title>
    <link href="http://smile.github.io/2023/03/14/kaggle/"/>
    <id>http://smile.github.io/2023/03/14/kaggle/</id>
    <published>2023-03-14T03:13:34.000Z</published>
    <updated>2023-05-05T13:59:20.159Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#kaggle-study-note">Kaggle study note</a><ul><li><a href="#%E7%BC%BA%E5%A4%B1%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86">缺失数据处理</a></li><li><a href="#missing_data%E6%9E%84%E5%BB%BA">missing_data构建：</a></li></ul></li></ul><h1 id="Kaggle-study-note"><a href="#Kaggle-study-note" class="headerlink" title="Kaggle study note"></a>Kaggle study note</h1><h2 id="缺失数据处理"><a href="#缺失数据处理" class="headerlink" title="缺失数据处理"></a>缺失数据处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#missing data</span></span><br><span class="line">total = df_train.isnull().<span class="built_in">sum</span>().sort_values(ascending=<span class="literal">False</span>)</span><br><span class="line">percent = (df_train.isnull().<span class="built_in">sum</span>()/df_train.isnull().count()).sort_values(ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#这里sum是把值加起来，count是数了一遍，有多少个值</span></span><br><span class="line">missing_data = pd.concat([total, percent], axis=<span class="number">1</span>, keys=[<span class="string">&#x27;Total&#x27;</span>, <span class="string">&#x27;Percent&#x27;</span>])</span><br><span class="line">missing_data.head(<span class="number">20</span>)</span><br></pre></td></tr></table></figure><h2 id="missing-data构建："><a href="#missing-data构建：" class="headerlink" title="missing_data构建："></a>missing_data构建：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">missing_data = pd.concat([total, percent], axis=<span class="number">1</span>, keys=[<span class="string">&#x27;Total&#x27;</span>, <span class="string">&#x27;Percent&#x27;</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#kaggle-study-note&quot;&gt;Kaggle study note&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%BC%BA%E5%A4%B1%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86&quot;&gt;缺失数据处理</summary>
      
    
    
    
    
    <category term="ML" scheme="http://smile.github.io/tags/ML/"/>
    
  </entry>
  
  <entry>
    <title>VPN推荐</title>
    <link href="http://smile.github.io/2023/02/25/VPN/"/>
    <id>http://smile.github.io/2023/02/25/VPN/</id>
    <published>2023-02-24T16:33:29.000Z</published>
    <updated>2023-02-24T16:35:57.663Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E4%BD%BF%E7%94%A8%E8%BF%87%E9%80%9F%E5%BA%A6%E6%9C%80%E5%BF%AB%E6%9C%80%E7%A8%B3%E5%AE%9A%E7%9A%84vpn">使用过速度最快最稳定的VPN</a></li></ul><h1 id="使用过速度最快最稳定的VPN"><a href="#使用过速度最快最稳定的VPN" class="headerlink" title="使用过速度最快最稳定的VPN"></a>使用过速度最快最稳定的VPN</h1><p><a href="https://www.feixunz.shop/auth/register?code=G7Ho">https://www.feixunz.shop/auth/register?code=G7Ho</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%BD%BF%E7%94%A8%E8%BF%87%E9%80%9F%E5%BA%A6%E6%9C%80%E5%BF%AB%E6%9C%80%E7%A8%B3%E5%AE%9A%E7%9A%84vpn&quot;&gt;使用过速度最快最稳定的VPN&lt;/a</summary>
      
    
    
    
    <category term="软件推荐" scheme="http://smile.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    
    
    <category term="实用软件" scheme="http://smile.github.io/tags/%E5%AE%9E%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>less_is_more</title>
    <link href="http://smile.github.io/2023/02/23/less-is-more/"/>
    <id>http://smile.github.io/2023/02/23/less-is-more/</id>
    <published>2023-02-22T16:23:58.000Z</published>
    <updated>2023-02-24T05:48:15.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习了一些基础算法"><a href="#学习了一些基础算法" class="headerlink" title="学习了一些基础算法"></a>学习了一些基础算法</h1><ul><li>首先是前缀和的算法<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],S[N];</span><br><span class="line"><span class="type">int</span> n,m,l,r;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n&gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)    &#123;cin &gt;&gt; a[i];&#125;</span><br><span class="line">    S[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)    &#123;S[i]=S[i<span class="number">-1</span>]+a[i];&#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt;r;</span><br><span class="line">        cout &lt;&lt; (S[r]-S[l<span class="number">-1</span>]) &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>接下来是差分算法，实际上是对于前缀和的逆运算<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],b[N];</span><br><span class="line"><span class="type">int</span> n,m,l,r,c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[l] +=c;</span><br><span class="line">    b[r+<span class="number">1</span>] -= c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">insert</span>(i,i,a[i]);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; l&gt;&gt;r&gt;&gt;c;</span><br><span class="line">        <span class="built_in">insert</span>(l,r,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) b[i]+=b[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cout &lt;&lt;b[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>实际上他们也都有各自的二维算法<br>这是前缀和<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> a[N][N],s[N][N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,q;</span><br><span class="line">    cin &gt;&gt; n&gt;&gt; m &gt;&gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j =<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">        &#123;  cin &gt;&gt; a[i][j];</span><br><span class="line">            s[i][j] = s[i][j<span class="number">-1</span>] + s[i<span class="number">-1</span>][j] -s[i<span class="number">-1</span>][j<span class="number">-1</span>] +a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x1,y1,x2,y2;</span><br><span class="line">        cin &gt;&gt; x1 &gt;&gt; y1&gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">        cout &lt;&lt; (s[x2][y2]-s[x2][y1<span class="number">-1</span>]-s[x1<span class="number">-1</span>][y2]+s[x1<span class="number">-1</span>][y1<span class="number">-1</span>]) &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>这是差分矩阵<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> a[N][N],b[N][N];</span><br><span class="line"><span class="type">int</span> n,m,q,x1,y1,x2,y2,c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x1,<span class="type">int</span> y1,<span class="type">int</span> x2,<span class="type">int</span> y2,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[x1][y1] +=c;</span><br><span class="line">    b[x2+<span class="number">1</span>][y1] -= c;</span><br><span class="line">    b[x1][y2+<span class="number">1</span>] -= c;</span><br><span class="line">    b[x2+<span class="number">1</span>][y2+<span class="number">1</span>] += c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt;m &gt;&gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            <span class="built_in">insert</span>(i,j,i,j,a[i][j]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(q--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2&gt;&gt;c;</span><br><span class="line">        <span class="built_in">insert</span>(x1,y1,x2,y2,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            b[i][j] += b[i<span class="number">-1</span>][j] + b[i][j<span class="number">-1</span>] -b[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; b[i][j] &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习了一些基础算法&quot;&gt;&lt;a href=&quot;#学习了一些基础算法&quot; class=&quot;headerlink&quot; title=&quot;学习了一些基础算法&quot;&gt;&lt;/a&gt;学习了一些基础算法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;首先是前缀和的算法&lt;figure class=&quot;highlight cp</summary>
      
    
    
    
    <category term="study" scheme="http://smile.github.io/categories/study/"/>
    
    
    <category term="code" scheme="http://smile.github.io/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>C++</title>
    <link href="http://smile.github.io/2023/02/22/C/"/>
    <id>http://smile.github.io/2023/02/22/C/</id>
    <published>2023-02-22T10:32:16.000Z</published>
    <updated>2023-02-24T05:47:50.040Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E5%85%B3%E4%BA%8Ec%E4%BC%A0%E5%BC%95%E7%94%A8%E5%92%8C%E4%BC%A0%E5%8F%82%E6%95%B0%E7%9A%84%E7%90%86%E8%A7%A3">关于C++传引用和传参数的理解</a><ul><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li></ul><h1 id="关于C-传引用和传参数的理解"><a href="#关于C-传引用和传参数的理解" class="headerlink" title="关于C++传引用和传参数的理解"></a>关于C++传引用和传参数的理解</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span>(<span class="params"><span class="built_in">int</span> &amp;a</span>)</span>&#123;</span><br><span class="line">    a = <span class="number">3</span>;</span><br><span class="line">    cout &lt;&lt; &amp;a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>(<span class="params"><span class="keyword">void</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line">    cout &lt;&lt; &amp;a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    test(a);</span><br><span class="line">    cout &lt;&lt; &amp;a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%85%B3%E4%BA%8Ec%E4%BC%A0%E5%BC%95%E7%94%A8%E5%92%8C%E4%BC%A0%E5%8F%82%E6%95%B0%E7%9A%84%E7%90%86%E8%A7%A3&quot;&gt;关于C++传引用和传</summary>
      
    
    
    
    <category term="study" scheme="http://smile.github.io/categories/study/"/>
    
    
    <category term="code" scheme="http://smile.github.io/tags/code/"/>
    
  </entry>
  
</feed>
